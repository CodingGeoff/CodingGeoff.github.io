{"remainingRequest":"/home/runner/work/CodingGeoff.github.io/CodingGeoff.github.io/node_modules/thread-loader/dist/cjs.js!/home/runner/work/CodingGeoff.github.io/CodingGeoff.github.io/node_modules/babel-loader/lib/index.js!/home/runner/work/CodingGeoff.github.io/CodingGeoff.github.io/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/runner/work/CodingGeoff.github.io/CodingGeoff.github.io/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/CodingGeoff.github.io/CodingGeoff.github.io/src/components/WindowChildren/WindowFolder.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/runner/work/CodingGeoff.github.io/CodingGeoff.github.io/src/components/WindowChildren/WindowFolder.vue","mtime":1721659069000},{"path":"/home/runner/work/CodingGeoff.github.io/CodingGeoff.github.io/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CodingGeoff.github.io/CodingGeoff.github.io/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CodingGeoff.github.io/CodingGeoff.github.io/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/runner/work/CodingGeoff.github.io/CodingGeoff.github.io/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CodingGeoff.github.io/CodingGeoff.github.io/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyIGZyb20gIi9ob21lL3J1bm5lci93b3JrL0NvZGluZ0dlb2ZmLmdpdGh1Yi5pby9Db2RpbmdHZW9mZi5naXRodWIuaW8vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIuY29uc3RydWN0b3IuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5mdW5jdGlvbi5uYW1lLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc2xpY2UuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5qb2luLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLnRvLWZpeGVkLmpzIjsKLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KaW1wb3J0IFdpbmRvdyBmcm9tICcuLi9XaW5kb3dCYXNpYy9XaW5kb3cudnVlJzsKaW1wb3J0IFdpbmRvd0ZvbGRlckljb24gZnJvbSAnLi9XaW5kb3dGb2xkZXJJY29uLnZ1ZSc7CmltcG9ydCBXaW5kb3dGb2xkZXJTbGlkZXIgZnJvbSAnLi9XaW5kb3dGb2xkZXJTbGlkZXIudnVlJzsKaW1wb3J0IFdpbmRvd1NpZGVyIGZyb20gJy4uL1dpbmRvd0Jhc2ljL1dpbmRvd1NpZGVyLnZ1ZSc7CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnV2luZG93VGV4dCcsCiAgY29tcG9uZW50czogewogICAgV2luZG93OiBXaW5kb3csCiAgICBXaW5kb3dTaWRlcjogV2luZG93U2lkZXIsCiAgICBXaW5kb3dGb2xkZXJJY29uOiBXaW5kb3dGb2xkZXJJY29uLAogICAgV2luZG93Rm9sZGVyU2xpZGVyOiBXaW5kb3dGb2xkZXJTbGlkZXIKICB9LAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICByZXN1bHQ6IFtdLAogICAgICBkZWxheTogMjAwLAogICAgICBjbGlja3M6IDAsCiAgICAgIGZvY3VzOiBmYWxzZSwKICAgICAgY29udF9tYXJnaW46IDUwLAogICAgICBjb250X2hlaWdodDogNTUwLAogICAgICBjb250X3dpZHRoOiA4MDAsCiAgICAgIGJvZHlfbWFyZ2luOiAyMDggKyAyMCwKICAgICAgc2VsZWN0ZWQ6ICJEYXRlIE1vZGlmaWVkIiwKICAgICAgZGlyZWN0aW9uX2Rvd246IHRydWUsCiAgICAgIG5hbWVfY29sX3dpZHRoOiAxNjAsCiAgICAgIGRhdGVfY29sX3dpZHRoOiAxMTAsCiAgICAgIHNpemVfY29sX3dpZHRoOiA1MCwKICAgICAgY3VycmVudF9mb2N1czogJycsCiAgICAgIGZpbGVfZmlsZW1hcDogW10sCiAgICAgIG9wZW5fb3BlbnBhdGg6IFtdCiAgICB9OwogIH0sCiAgcHJvcHM6IHsKICAgIHV1aWQ6IFN0cmluZywKICAgIHN0YXJ0cG9zX3g6IHsKICAgICAgZGVmYXVsdDogNjAKICAgIH0sCiAgICBzdGFydHBvc195OiB7CiAgICAgIGRlZmF1bHQ6IDYwCiAgICB9LAogICAgemluZGV4OiB7CiAgICAgIHR5cGU6IE51bWJlciwKICAgICAgZGVmYXVsdDogOTk5CiAgICB9LAogICAgbWluaW1pemVkOiB7CiAgICAgIHR5cGU6IEJvb2xlYW4sCiAgICAgIGRlZmF1bHQ6IGZhbHNlCiAgICB9LAogICAgZmlsZW1hcDogewogICAgICBkZWZhdWx0OiBbXQogICAgfSwKICAgIG9wZW5wYXRoOiB7CiAgICAgIGRlZmF1bHQ6IFtdCiAgICB9CiAgfSwKICBjcmVhdGVkOiBmdW5jdGlvbiBjcmVhdGVkKCkgewogICAgdGhpcy5maWxlX2ZpbGVtYXAgPSB0aGlzLmZpbGVtYXA7CiAgICB0aGlzLm9wZW5fb3BlbnBhdGggPSB0aGlzLm9wZW5wYXRoOwogIH0sCiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCgpIHsKICAgIHRoaXMuJHN0b3JlLmNvbW1pdCgncmVmcmVzaF93aW5kb3dfZm9jdXMnLCB7CiAgICAgIHV1aWQ6IHRoaXMudXVpZAogICAgfSk7CiAgfSwKICB3YXRjaDogewogICAgZmlsZW1hcDogZnVuY3Rpb24gZmlsZW1hcCh2YWwpIHsKICAgICAgdGhpcy5maWxlX2ZpbGVtYXAgPSB2YWw7CiAgICB9LAogICAgb3BlbnBhdGg6IGZ1bmN0aW9uIG9wZW5wYXRoKHZhbCkgewogICAgICB0aGlzLm9wZW5fb3BlbnBhdGggPSB2YWw7CiAgICB9CiAgfSwKICBjb21wdXRlZDogewogICAgbWRpX2NvbXB1dGVkX2RpcmVjdGlvbjogZnVuY3Rpb24gbWRpX2NvbXB1dGVkX2RpcmVjdGlvbigpIHsKICAgICAgaWYgKHRoaXMuZGlyZWN0aW9uX2Rvd24pIHsKICAgICAgICByZXR1cm4gJ21kaS1jaGV2cm9uLWRvd24nOwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiAnbWRpLWNoZXZyb24tdXAnOwogICAgICB9CiAgICB9LAogICAgY3VycmVudF9kaXJfbGlzdDogZnVuY3Rpb24gY3VycmVudF9kaXJfbGlzdCgpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIGlmICh0aGlzLmZpbGVfZmlsZW1hcCA9PT0gW10gfHwgdGhpcy5vcGVuX29wZW5wYXRoID09PSBbXSkgewogICAgICAgIHJldHVybiBbXTsKICAgICAgfSAvLyBlbHNlIAoKCiAgICAgIHZhciBjdXJyZW50X2ZvbGRlcl9wb2ludGVyID0gdGhpcy5maWxlX2ZpbGVtYXA7CgogICAgICB2YXIgX2l0ZXJhdG9yID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIodGhpcy5vcGVuX29wZW5wYXRoKSwKICAgICAgICAgIF9zdGVwOwoKICAgICAgdHJ5IHsKICAgICAgICBmb3IgKF9pdGVyYXRvci5zKCk7ICEoX3N0ZXAgPSBfaXRlcmF0b3IubigpKS5kb25lOykgewogICAgICAgICAgdmFyIGRpcm5hbWUgPSBfc3RlcC52YWx1ZTsKCiAgICAgICAgICB2YXIgX2l0ZXJhdG9yMiA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGN1cnJlbnRfZm9sZGVyX3BvaW50ZXIpLAogICAgICAgICAgICAgIF9zdGVwMjsKCiAgICAgICAgICB0cnkgewogICAgICAgICAgICBmb3IgKF9pdGVyYXRvcjIucygpOyAhKF9zdGVwMiA9IF9pdGVyYXRvcjIubigpKS5kb25lOykgewogICAgICAgICAgICAgIHZhciB0bXAgPSBfc3RlcDIudmFsdWU7CgogICAgICAgICAgICAgIGlmICh0bXAubmFtZSA9PT0gZGlybmFtZSkgewogICAgICAgICAgICAgICAgY3VycmVudF9mb2xkZXJfcG9pbnRlciA9IHRtcC5jaGlsZHJlbjsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgICAgIF9pdGVyYXRvcjIuZShlcnIpOwogICAgICAgICAgfSBmaW5hbGx5IHsKICAgICAgICAgICAgX2l0ZXJhdG9yMi5mKCk7CiAgICAgICAgICB9CiAgICAgICAgfSAvLyBzb3J0CgogICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICBfaXRlcmF0b3IuZShlcnIpOwogICAgICB9IGZpbmFsbHkgewogICAgICAgIF9pdGVyYXRvci5mKCk7CiAgICAgIH0KCiAgICAgIHZhciByZXN1bHQgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGN1cnJlbnRfZm9sZGVyX3BvaW50ZXIpKTsKICAgICAgdmFyIGNvbXBhcmVfdGFnID0gIm5hbWUiOwoKICAgICAgaWYgKHRoaXMuc2VsZWN0ZWQgPT09ICJOYW1lIikgewogICAgICAgIGNvbXBhcmVfdGFnID0gJ25hbWUnOwogICAgICB9IGVsc2UgaWYgKHRoaXMuc2VsZWN0ZWQgPT09ICJEYXRlIE1vZGlmaWVkIikgewogICAgICAgIGNvbXBhcmVfdGFnID0gJ2xhc3RlZGl0dGltZSc7CiAgICAgIH0gZWxzZSBpZiAodGhpcy5zZWxlY3RlZCA9PT0gIlNpemUiKSB7CiAgICAgICAgY29tcGFyZV90YWcgPSAnc2l6ZSc7CiAgICAgIH0KCiAgICAgIHZhciBzb3J0ZnVuYyA9IGZ1bmN0aW9uIHNvcnRmdW5jKGEsIGIpIHsKICAgICAgICB2YXIgcmVzID0gMDsKCiAgICAgICAgaWYgKGEuc2l6ZSA8IDAgJiYgYi5zaXplID49IDApIHsKICAgICAgICAgIHJlcyA9IC0xOwogICAgICAgIH0gZWxzZSBpZiAoYS5zaXplID49IDAgJiYgYi5zaXplIDwgMCkgewogICAgICAgICAgcmVzID0gMTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgaWYgKGFbY29tcGFyZV90YWddID09PSBiW2NvbXBhcmVfdGFnXSkgewogICAgICAgICAgICByZXMgPSAwOwogICAgICAgICAgfSBlbHNlIGlmIChhW2NvbXBhcmVfdGFnXSA+IGJbY29tcGFyZV90YWddKSB7CiAgICAgICAgICAgIHJlcyA9IDE7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXMgPSAtMTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmIChfdGhpcy5kaXJlY3Rpb25fZG93bikgewogICAgICAgICAgcmV0dXJuIC1yZXM7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJldHVybiByZXM7CiAgICAgICAgfQogICAgICB9OwoKICAgICAgcmVzdWx0LnNvcnQoc29ydGZ1bmMpOwogICAgICByZXR1cm4gcmVzdWx0OwogICAgfSwKICAgIGZvbGRlcl9uYW1lOiBmdW5jdGlvbiBmb2xkZXJfbmFtZSgpIHsKICAgICAgaWYgKHRoaXMub3Blbl9vcGVucGF0aC5sZW5ndGggPT09IDApIHsKICAgICAgICByZXR1cm4gIiI7CiAgICAgIH0gLy8gZWxzZSAKCgogICAgICByZXR1cm4gdGhpcy5vcGVuX29wZW5wYXRoW3RoaXMub3Blbl9vcGVucGF0aC5sZW5ndGggLSAxXTsKICAgIH0sCiAgICBnbG9iYWxfZm9jdXM6IGZ1bmN0aW9uIGdsb2JhbF9mb2N1cygpIHsKICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLnN0YXRlLmN1cnJlbnRfZm9jdXM7CiAgICB9CiAgfSwKICBtZXRob2RzOiB7CiAgICBQcmVmaXhaZXJvOiBmdW5jdGlvbiBQcmVmaXhaZXJvKG51bSwgbikgewogICAgICByZXR1cm4gKEFycmF5KG4pLmpvaW4oMCkgKyBudW0pLnNsaWNlKC1uKTsKICAgIH0sCiAgICBnZXRPZmZzZXQ6IGZ1bmN0aW9uIGdldE9mZnNldChvZmZzZXQsIG1pbiwgbWF4KSB7CiAgICAgIGlmIChvZmZzZXQgPCBtaW4pIHsKICAgICAgICByZXR1cm4gbWluOwogICAgICB9IGVsc2UgaWYgKG9mZnNldCA+IG1heCkgewogICAgICAgIHJldHVybiBtYXg7CiAgICAgIH0KCiAgICAgIHJldHVybiBvZmZzZXQ7CiAgICB9LAogICAgd2luZG93X2hlaWdodF9jaGFuZ2VkOiBmdW5jdGlvbiB3aW5kb3dfaGVpZ2h0X2NoYW5nZWQodmFsKSB7CiAgICAgIHRoaXMuY29udF9oZWlnaHQgPSB2YWwgLSB0aGlzLmNvbnRfbWFyZ2luOwogICAgfSwKICAgIHdpbmRvd193aWR0aF9jaGFuZ2VkOiBmdW5jdGlvbiB3aW5kb3dfd2lkdGhfY2hhbmdlZCh2YWwpIHsKICAgICAgdGhpcy5jb250X3dpZHRoID0gdmFsIC0gdGhpcy5ib2R5X21hcmdpbjsKICAgICAgdmFyIHN1bSA9IHRoaXMubmFtZV9jb2xfd2lkdGggKyB0aGlzLmRhdGVfY29sX3dpZHRoICsgdGhpcy5zaXplX2NvbF93aWR0aDsKICAgICAgdGhpcy5uYW1lX2NvbF93aWR0aCA9IHRoaXMubmFtZV9jb2xfd2lkdGggKiB0aGlzLmNvbnRfd2lkdGggLyBzdW07CiAgICAgIHRoaXMuZGF0ZV9jb2xfd2lkdGggPSB0aGlzLmRhdGVfY29sX3dpZHRoICogdGhpcy5jb250X3dpZHRoIC8gc3VtOwogICAgICB0aGlzLnNpemVfY29sX3dpZHRoID0gdGhpcy5zaXplX2NvbF93aWR0aCAqIHRoaXMuY29udF93aWR0aCAvIHN1bTsKICAgIH0sCiAgICByaWdodF9yZXNpemU6IGZ1bmN0aW9uIHJpZ2h0X3Jlc2l6ZSgpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICB2YXIgb3JuX21vdXNlZG93biA9IGRvY3VtZW50Lm9ubW91c2Vkb3duOwogICAgICB2YXIgZSA9IGUgfHwgd2luZG93LmV2ZW50IHx8IGUud2hpY2g7CiAgICAgIHZhciBkb3duWCA9IGUuY2xpZW50WDsKICAgICAgdmFyIG9ybl93aWR0aCA9IHRoaXMuJHJlZnMubGVmdGJhci5zdHlsZS53aWR0aDsKICAgICAgb3JuX3dpZHRoID0gcGFyc2VGbG9hdChvcm5fd2lkdGguc3Vic3RyKDAsIG9ybl93aWR0aC5sZW5ndGggLSAyKSk7CiAgICAgIHZhciBuYW1lX29ybl93aWR0aCA9IHRoaXMuJHJlZnMubmFtZV9jb2wuc3R5bGUud2lkdGg7CiAgICAgIG5hbWVfb3JuX3dpZHRoID0gcGFyc2VGbG9hdChuYW1lX29ybl93aWR0aC5zdWJzdHIoMCwgbmFtZV9vcm5fd2lkdGgubGVuZ3RoIC0gMikpOwogICAgICB2YXIgZGF0ZV9vcm5fd2lkdGggPSB0aGlzLiRyZWZzLmRhdGVfY29sLnN0eWxlLndpZHRoOwogICAgICBkYXRlX29ybl93aWR0aCA9IHBhcnNlRmxvYXQoZGF0ZV9vcm5fd2lkdGguc3Vic3RyKDAsIGRhdGVfb3JuX3dpZHRoLmxlbmd0aCAtIDIpKTsKICAgICAgdmFyIHNpemVfb3JuX3dpZHRoID0gdGhpcy4kcmVmcy5zaXplX2NvbC5zdHlsZS53aWR0aDsKICAgICAgc2l6ZV9vcm5fd2lkdGggPSBwYXJzZUZsb2F0KHNpemVfb3JuX3dpZHRoLnN1YnN0cigwLCBzaXplX29ybl93aWR0aC5sZW5ndGggLSAyKSk7CiAgICAgIHZhciBzdW0gPSBuYW1lX29ybl93aWR0aCArIGRhdGVfb3JuX3dpZHRoICsgc2l6ZV9vcm5fd2lkdGg7CiAgICAgIHZhciBtYXggPSBNYXRoLm1heChNYXRoLm1pbihzdW0gLSBkYXRlX29ybl93aWR0aCAtIHNpemVfb3JuX3dpZHRoIC0gMTEwLCAyNjApLCAxNjApOwogICAgICB2YXIgbWluID0gMTYwOwoKICAgICAgdmFyIG1vdXNlTW92ZUhhbmRsZXIgPSBmdW5jdGlvbiBtb3VzZU1vdmVIYW5kbGVyKCkgewogICAgICAgIHZhciBlID0gZSB8fCB3aW5kb3cuZXZlbnQgfHwgZS53aGljaDsKICAgICAgICB2YXIgbW92ZVggPSBlLmNsaWVudFg7CgogICAgICAgIHZhciBvZmZzZXRYID0gX3RoaXMyLmdldE9mZnNldChtb3ZlWCAtIGRvd25YICsgb3JuX3dpZHRoLCBtaW4sIG1heCk7CgogICAgICAgIF90aGlzMi4kcmVmcy5sZWZ0YmFyLnN0eWxlLndpZHRoID0gb2Zmc2V0WCArICdweCc7CiAgICAgICAgX3RoaXMyLmJvZHlfbWFyZ2luID0gb2Zmc2V0WCArIDIwOwogICAgICAgIHZhciBuYW1lX2NvbF93aWR0aCA9IG5hbWVfb3JuX3dpZHRoICsgb3JuX3dpZHRoIC0gb2Zmc2V0WDsKICAgICAgICBfdGhpczIuJHJlZnMubmFtZV9jb2wuc3R5bGUud2lkdGggPSBuYW1lX2NvbF93aWR0aCArICdweCc7CiAgICAgICAgX3RoaXMyLiRyZWZzLm5hbWVfY29sX2NvbnQuc3R5bGUud2lkdGggPSBuYW1lX2NvbF93aWR0aCArICdweCc7CiAgICAgIH07CgogICAgICB2YXIgbW91c2VVcEhhbmRsZXIgPSBmdW5jdGlvbiBtb3VzZVVwSGFuZGxlcigpIHsKICAgICAgICBkb2N1bWVudC5vbm1vdXNlbW92ZSA9IG51bGw7CiAgICAgICAgZG9jdW1lbnQub25tb3VzZXVwID0gbnVsbDsKICAgICAgICBkb2N1bWVudC5vbm1vdXNlZG93biA9IG9ybl9tb3VzZWRvd247CiAgICAgIH07CgogICAgICBkb2N1bWVudC5vbm1vdXNlbW92ZSA9IG1vdXNlTW92ZUhhbmRsZXI7CiAgICAgIGRvY3VtZW50Lm9ubW91c2V1cCA9IG1vdXNlVXBIYW5kbGVyOwoKICAgICAgZG9jdW1lbnQub25tb3VzZWRvd24gPSBmdW5jdGlvbiAoKSB7fTsKICAgIH0sCiAgICBzd2l0Y2hfc2VsZWN0ZWQ6IGZ1bmN0aW9uIHN3aXRjaF9zZWxlY3RlZCh2YWwpIHsKICAgICAgdGhpcy5zZWxlY3RlZCA9IHZhbDsKICAgICAgdGhpcy5kaXJlY3Rpb25fZG93biA9ICF0aGlzLmRpcmVjdGlvbl9kb3duOwogICAgfSwKICAgIHJpZ2h0X3Jlc2l6ZV9ncmlkXzE6IGZ1bmN0aW9uIHJpZ2h0X3Jlc2l6ZV9ncmlkXzEoKSB7CiAgICAgIHZhciBfdGhpczMgPSB0aGlzOwoKICAgICAgdmFyIG9ybl9tb3VzZWRvd24gPSBkb2N1bWVudC5vbm1vdXNlZG93bjsKICAgICAgdmFyIGUgPSBlIHx8IHdpbmRvdy5ldmVudCB8fCBlLndoaWNoOwogICAgICB2YXIgZG93blggPSBlLmNsaWVudFg7CiAgICAgIGRvd25YOwogICAgICB2YXIgbmFtZV9vcm5fd2lkdGggPSB0aGlzLiRyZWZzLm5hbWVfY29sLnN0eWxlLndpZHRoOwogICAgICBuYW1lX29ybl93aWR0aCA9IHBhcnNlRmxvYXQobmFtZV9vcm5fd2lkdGguc3Vic3RyKDAsIG5hbWVfb3JuX3dpZHRoLmxlbmd0aCAtIDIpKTsKICAgICAgdmFyIGRhdGVfb3JuX3dpZHRoID0gdGhpcy4kcmVmcy5kYXRlX2NvbC5zdHlsZS53aWR0aDsKICAgICAgZGF0ZV9vcm5fd2lkdGggPSBwYXJzZUZsb2F0KGRhdGVfb3JuX3dpZHRoLnN1YnN0cigwLCBkYXRlX29ybl93aWR0aC5sZW5ndGggLSAyKSk7CiAgICAgIHZhciBzaXplX29ybl93aWR0aCA9IHRoaXMuJHJlZnMuc2l6ZV9jb2wuc3R5bGUud2lkdGg7CiAgICAgIHNpemVfb3JuX3dpZHRoID0gcGFyc2VGbG9hdChzaXplX29ybl93aWR0aC5zdWJzdHIoMCwgc2l6ZV9vcm5fd2lkdGgubGVuZ3RoIC0gMikpOwogICAgICB2YXIgc3VtID0gbmFtZV9vcm5fd2lkdGggKyBkYXRlX29ybl93aWR0aCArIHNpemVfb3JuX3dpZHRoOwogICAgICB2YXIgbWluX3NpemUgPSAxMTA7CiAgICAgIHZhciBtYXhfc2l6ZSA9IHN1bSAtIDE5MDsKCiAgICAgIHZhciBtb3VzZU1vdmVIYW5kbGVyID0gZnVuY3Rpb24gbW91c2VNb3ZlSGFuZGxlcigpIHsKICAgICAgICB2YXIgZSA9IGUgfHwgd2luZG93LmV2ZW50IHx8IGUud2hpY2g7CiAgICAgICAgdmFyIG1vdmVYID0gZS5jbGllbnRYOwoKICAgICAgICB2YXIgb2Zmc2V0WCA9IF90aGlzMy5nZXRPZmZzZXQobW92ZVggLSBkb3duWCArIG5hbWVfb3JuX3dpZHRoLCBtaW5fc2l6ZSwgbWF4X3NpemUpOwoKICAgICAgICB2YXIgc2l6ZV9jb2xfd2lkdGggPSBNYXRoLm1heChzdW0gLSBkYXRlX29ybl93aWR0aCAtIG9mZnNldFgsIDcwKTsKICAgICAgICB2YXIgZGF0ZV9jb2xfd2lkdGggPSBzdW0gLSBzaXplX2NvbF93aWR0aCAtIG9mZnNldFg7CiAgICAgICAgX3RoaXMzLiRyZWZzLm5hbWVfY29sLnN0eWxlLndpZHRoID0gb2Zmc2V0WCArICdweCc7CiAgICAgICAgX3RoaXMzLiRyZWZzLnNpemVfY29sLnN0eWxlLndpZHRoID0gc2l6ZV9jb2xfd2lkdGggKyAncHgnOwogICAgICAgIF90aGlzMy4kcmVmcy5kYXRlX2NvbC5zdHlsZS53aWR0aCA9IGRhdGVfY29sX3dpZHRoICsgJ3B4JzsKICAgICAgICBfdGhpczMuJHJlZnMubmFtZV9jb2xfY29udC5zdHlsZS53aWR0aCA9IG9mZnNldFggKyA0ICsgJ3B4JzsKICAgICAgICBfdGhpczMuJHJlZnMuc2l6ZV9jb2xfY29udC5zdHlsZS53aWR0aCA9IHNpemVfY29sX3dpZHRoICsgNCArICdweCc7CiAgICAgICAgX3RoaXMzLiRyZWZzLmRhdGVfY29sX2NvbnQuc3R5bGUud2lkdGggPSBkYXRlX2NvbF93aWR0aCArIDEwICsgJ3B4JzsKICAgICAgfTsKCiAgICAgIHZhciBtb3VzZVVwSGFuZGxlciA9IGZ1bmN0aW9uIG1vdXNlVXBIYW5kbGVyKCkgewogICAgICAgIGRvY3VtZW50Lm9ubW91c2Vtb3ZlID0gbnVsbDsKICAgICAgICBkb2N1bWVudC5vbm1vdXNldXAgPSBudWxsOwogICAgICAgIGRvY3VtZW50Lm9ubW91c2Vkb3duID0gb3JuX21vdXNlZG93bjsKICAgICAgfTsKCiAgICAgIGRvY3VtZW50Lm9ubW91c2Vtb3ZlID0gbW91c2VNb3ZlSGFuZGxlcjsKICAgICAgZG9jdW1lbnQub25tb3VzZXVwID0gbW91c2VVcEhhbmRsZXI7CgogICAgICBkb2N1bWVudC5vbm1vdXNlZG93biA9IGZ1bmN0aW9uICgpIHt9OwogICAgfSwKICAgIHJpZ2h0X3Jlc2l6ZV9ncmlkXzI6IGZ1bmN0aW9uIHJpZ2h0X3Jlc2l6ZV9ncmlkXzIoKSB7CiAgICAgIHZhciBfdGhpczQgPSB0aGlzOwoKICAgICAgdmFyIG9ybl9tb3VzZWRvd24gPSBkb2N1bWVudC5vbm1vdXNlZG93bjsKICAgICAgdmFyIGUgPSBlIHx8IHdpbmRvdy5ldmVudCB8fCBlLndoaWNoOwogICAgICB2YXIgZG93blggPSBlLmNsaWVudFg7CiAgICAgIGRvd25YOwogICAgICB2YXIgbmFtZV9vcm5fd2lkdGggPSB0aGlzLiRyZWZzLm5hbWVfY29sLnN0eWxlLndpZHRoOwogICAgICBuYW1lX29ybl93aWR0aCA9IHBhcnNlRmxvYXQobmFtZV9vcm5fd2lkdGguc3Vic3RyKDAsIG5hbWVfb3JuX3dpZHRoLmxlbmd0aCAtIDIpKTsKICAgICAgdmFyIGRhdGVfb3JuX3dpZHRoID0gdGhpcy4kcmVmcy5kYXRlX2NvbC5zdHlsZS53aWR0aDsKICAgICAgZGF0ZV9vcm5fd2lkdGggPSBwYXJzZUZsb2F0KGRhdGVfb3JuX3dpZHRoLnN1YnN0cigwLCBkYXRlX29ybl93aWR0aC5sZW5ndGggLSAyKSk7CiAgICAgIHZhciBzaXplX29ybl93aWR0aCA9IHRoaXMuJHJlZnMuc2l6ZV9jb2wuc3R5bGUud2lkdGg7CiAgICAgIHNpemVfb3JuX3dpZHRoID0gcGFyc2VGbG9hdChzaXplX29ybl93aWR0aC5zdWJzdHIoMCwgc2l6ZV9vcm5fd2lkdGgubGVuZ3RoIC0gMikpOwogICAgICB2YXIgc3VtID0gbmFtZV9vcm5fd2lkdGggKyBkYXRlX29ybl93aWR0aCArIHNpemVfb3JuX3dpZHRoOwogICAgICB2YXIgbWluX3NpemUgPSAxMjA7CiAgICAgIHZhciBtYXhfc2l6ZSA9IHN1bSAtIG5hbWVfb3JuX3dpZHRoIC0gNzA7CgogICAgICB2YXIgbW91c2VNb3ZlSGFuZGxlciA9IGZ1bmN0aW9uIG1vdXNlTW92ZUhhbmRsZXIoKSB7CiAgICAgICAgdmFyIGUgPSBlIHx8IHdpbmRvdy5ldmVudCB8fCBlLndoaWNoOwogICAgICAgIHZhciBtb3ZlWCA9IGUuY2xpZW50WDsKCiAgICAgICAgdmFyIG9mZnNldFggPSBfdGhpczQuZ2V0T2Zmc2V0KG1vdmVYIC0gZG93blggKyBkYXRlX29ybl93aWR0aCwgbWluX3NpemUsIG1heF9zaXplKTsKCiAgICAgICAgdmFyIHNpemVfY29sX3dpZHRoID0gc3VtIC0gb2Zmc2V0WCAtIG5hbWVfb3JuX3dpZHRoOwogICAgICAgIF90aGlzNC4kcmVmcy5kYXRlX2NvbC5zdHlsZS53aWR0aCA9IG9mZnNldFggKyAncHgnOwogICAgICAgIF90aGlzNC4kcmVmcy5zaXplX2NvbC5zdHlsZS53aWR0aCA9IHNpemVfY29sX3dpZHRoICsgJ3B4JzsKICAgICAgICBfdGhpczQuJHJlZnMuZGF0ZV9jb2xfY29udC5zdHlsZS53aWR0aCA9IG9mZnNldFggKyAxMCArICdweCc7CiAgICAgICAgX3RoaXM0LiRyZWZzLnNpemVfY29sX2NvbnQuc3R5bGUud2lkdGggPSBzaXplX2NvbF93aWR0aCArIDQgKyAncHgnOwogICAgICB9OwoKICAgICAgdmFyIG1vdXNlVXBIYW5kbGVyID0gZnVuY3Rpb24gbW91c2VVcEhhbmRsZXIoKSB7CiAgICAgICAgZG9jdW1lbnQub25tb3VzZW1vdmUgPSBudWxsOwogICAgICAgIGRvY3VtZW50Lm9ubW91c2V1cCA9IG51bGw7CiAgICAgICAgZG9jdW1lbnQub25tb3VzZWRvd24gPSBvcm5fbW91c2Vkb3duOwogICAgICB9OwoKICAgICAgZG9jdW1lbnQub25tb3VzZW1vdmUgPSBtb3VzZU1vdmVIYW5kbGVyOwogICAgICBkb2N1bWVudC5vbm1vdXNldXAgPSBtb3VzZVVwSGFuZGxlcjsKCiAgICAgIGRvY3VtZW50Lm9ubW91c2Vkb3duID0gZnVuY3Rpb24gKCkge307CiAgICB9LAogICAgdGltZV9mb3JtYXRfY29udmVydGVyOiBmdW5jdGlvbiB0aW1lX2Zvcm1hdF9jb252ZXJ0ZXIodmFsKSB7CiAgICAgIHZhciBuZXdkYXRlID0gbmV3IERhdGUodmFsICogMTAwMCk7CiAgICAgIHJldHVybiBuZXdkYXRlLmdldEZ1bGxZZWFyKCkgKyAnLycgKyB0aGlzLlByZWZpeFplcm8obmV3ZGF0ZS5nZXRNb250aCgpICsgMSwgMikgKyAnLycgKyB0aGlzLlByZWZpeFplcm8obmV3ZGF0ZS5nZXREYXRlKCksIDIpICsgJyAnICsgdGhpcy5QcmVmaXhaZXJvKG5ld2RhdGUuZ2V0SG91cnMoKSwgMikgKyAnOicgKyB0aGlzLlByZWZpeFplcm8obmV3ZGF0ZS5nZXRNaW51dGVzKCksIDIpICsgJzonICsgdGhpcy5QcmVmaXhaZXJvKG5ld2RhdGUuZ2V0U2Vjb25kcygpLCAyKTsKICAgIH0sCiAgICBzaXplX2Zvcm1hdF9jb252ZXJ0ZXI6IGZ1bmN0aW9uIHNpemVfZm9ybWF0X2NvbnZlcnRlcih2YWwpIHsKICAgICAgaWYgKHZhbCA8IDApIHsKICAgICAgICByZXR1cm4gJy0nOwogICAgICB9IGVsc2UgaWYgKHZhbCA+PSAxIDw8IDIwKSB7CiAgICAgICAgcmV0dXJuICh2YWwgLyAoMSA8PCAyMCkpLnRvRml4ZWQoMSkgKyAnTUInOwogICAgICB9IGVsc2UgaWYgKHZhbCA+PSAxIDw8IDEwKSB7CiAgICAgICAgcmV0dXJuICh2YWwgLyAoMSA8PCAxMCkpLnRvRml4ZWQoMSkgKyAnS0InOwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiB2YWwgKyAiQiI7CiAgICAgIH0KICAgIH0sCiAgICBpdGVtX29uZUNsaWNrOiBmdW5jdGlvbiBpdGVtX29uZUNsaWNrKHZhbCkgewogICAgICB0aGlzLmN1cnJlbnRfZm9jdXMgPSB0aGlzLmN1cnJlbnRfZGlyX2xpc3RbdmFsXS5maWxldXVpZDsKICAgICAgdGhpcy5jbGlja3MrKzsKCiAgICAgIGlmICh0aGlzLmNsaWNrcyA9PT0gMSkgewogICAgICAgIHZhciBzZWxmID0gdGhpczsKICAgICAgICB0aGlzLnRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICBzZWxmLmNsaWNrcyA9IDA7CiAgICAgICAgfSwgdGhpcy5kZWxheSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZXIpOwogICAgICAgIHZhciBpdGVtID0gdGhpcy5jdXJyZW50X2Rpcl9saXN0W3ZhbF07CgogICAgICAgIGlmIChpdGVtLmNoaWxkcmVuID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUuY3Vyc29yID0gJ3Byb2dyZXNzJzsKICAgICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS5jdXJzb3IgPSAnZGVmYXVsdCc7CiAgICAgICAgICB9LCA1MDApOwogICAgICAgICAgdGhpcy4kc3RvcmUuY29tbWl0KCdvcGVuX25ld193aW5kb3cnLCB7CiAgICAgICAgICAgIHR5cGU6ICd0ZXh0JywKICAgICAgICAgICAgZmlsZXNyYzogaXRlbS5wYXRoLAogICAgICAgICAgICBmaWxlbmFtZTogaXRlbS5uYW1lLAogICAgICAgICAgICBzaXplOiBpdGVtLnNpemUKICAgICAgICAgIH0pOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAvLyBkb2N1bWVudC5ib2R5LnN0eWxlLmN1cnNvcj0ncHJvZ3Jlc3MnCiAgICAgICAgICAvLyB3aW5kb3cuc2V0VGltZW91dCgoKT0+ewogICAgICAgICAgLy8gICBsZXQgdG1wID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0aGlzLm9wZW5wYXRoKSkKICAgICAgICAgIC8vICAgdG1wLnB1c2goaXRlbS5uYW1lKQogICAgICAgICAgLy8gICB0aGlzLiRzdG9yZS5jb21taXQoJ29wZW5fbmV3X3dpbmRvdycsIHsndHlwZSc6J2V4cGxvcmVyJywnb3BlbnBhdGgnOnRtcH0pCiAgICAgICAgICAvLyAgIGRvY3VtZW50LmJvZHkuc3R5bGUuY3Vyc29yPSdkZWZhdWx0JwogICAgICAgICAgLy8gfSw0NTApCiAgICAgICAgICB0aGlzLm9wZW5fb3BlbnBhdGgucHVzaChpdGVtLm5hbWUpOwogICAgICAgICAgdGhpcy5maWxlX2ZpbGVtYXAgPSBpdGVtLmNoaWxkcmVuOwogICAgICAgIH0KCiAgICAgICAgdGhpcy5jbGlja3MgPSAwOwogICAgICB9CiAgICB9LAogICAgc3dpdGNoX3N1cHJfY2xhc3M6IGZ1bmN0aW9uIHN3aXRjaF9zdXByX2NsYXNzKHZhbCkgewogICAgICB2YXIgZGlmZl9udW0gPSB0aGlzLm9wZW5fb3BlbnBhdGgubGVuZ3RoIC0gMSAtIHZhbDsKCiAgICAgIGlmIChkaWZmX251bSA+IDApIHsKICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGRpZmZfbnVtOyBqKyspIHsKICAgICAgICAgIHRoaXMub3Blbl9vcGVucGF0aC5wb3AoKTsKICAgICAgICB9CgogICAgICAgIHZhciBmb2xkZXJfcG9pbnRlciA9IHRoaXMuZmlsZW1hcDsKCiAgICAgICAgdmFyIF9pdGVyYXRvcjMgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcih0aGlzLm9wZW5fb3BlbnBhdGgpLAogICAgICAgICAgICBfc3RlcDM7CgogICAgICAgIHRyeSB7CiAgICAgICAgICBmb3IgKF9pdGVyYXRvcjMucygpOyAhKF9zdGVwMyA9IF9pdGVyYXRvcjMubigpKS5kb25lOykgewogICAgICAgICAgICB2YXIgZGlybmFtZSA9IF9zdGVwMy52YWx1ZTsKCiAgICAgICAgICAgIHZhciBfaXRlcmF0b3I0ID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoZm9sZGVyX3BvaW50ZXIpLAogICAgICAgICAgICAgICAgX3N0ZXA0OwoKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICBmb3IgKF9pdGVyYXRvcjQucygpOyAhKF9zdGVwNCA9IF9pdGVyYXRvcjQubigpKS5kb25lOykgewogICAgICAgICAgICAgICAgdmFyIGl0ZW0gPSBfc3RlcDQudmFsdWU7CgogICAgICAgICAgICAgICAgaWYgKGl0ZW0uY2hpbGRyZW4gPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAoaXRlbS5uYW1lID09PSBkaXJuYW1lKSB7CiAgICAgICAgICAgICAgICAgIGZvbGRlcl9wb2ludGVyID0gaXRlbS5jaGlsZHJlbjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgICAgICAgIF9pdGVyYXRvcjQuZShlcnIpOwogICAgICAgICAgICB9IGZpbmFsbHkgewogICAgICAgICAgICAgIF9pdGVyYXRvcjQuZigpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgICBfaXRlcmF0b3IzLmUoZXJyKTsKICAgICAgICB9IGZpbmFsbHkgewogICAgICAgICAgX2l0ZXJhdG9yMy5mKCk7CiAgICAgICAgfQoKICAgICAgICB0aGlzLmZpbGVfZmlsZW1hcCA9IGZvbGRlcl9wb2ludGVyOwogICAgICB9CiAgICB9LAogICAgbXJfY2xpY2tlZDogZnVuY3Rpb24gbXJfY2xpY2tlZCgpIHsKICAgICAgdGhpcy4kc3RvcmUuY29tbWl0KCdzaG93X2NvbnRleHRfbWVudScpOwogICAgfQogIH0KfTs="},null]}