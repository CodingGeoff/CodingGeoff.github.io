{"remainingRequest":"/home/runner/work/CodingGeoff.github.io/CodingGeoff.github.io/node_modules/thread-loader/dist/cjs.js!/home/runner/work/CodingGeoff.github.io/CodingGeoff.github.io/node_modules/babel-loader/lib/index.js!/home/runner/work/CodingGeoff.github.io/CodingGeoff.github.io/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/runner/work/CodingGeoff.github.io/CodingGeoff.github.io/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/CodingGeoff.github.io/CodingGeoff.github.io/src/components/Desktop/Desktop.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/runner/work/CodingGeoff.github.io/CodingGeoff.github.io/src/components/Desktop/Desktop.vue","mtime":1721659069000},{"path":"/home/runner/work/CodingGeoff.github.io/CodingGeoff.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1731071015000},{"path":"/home/runner/work/CodingGeoff.github.io/CodingGeoff.github.io/node_modules/thread-loader/dist/cjs.js","mtime":1731071015000},{"path":"/home/runner/work/CodingGeoff.github.io/CodingGeoff.github.io/node_modules/babel-loader/lib/index.js","mtime":1731071015000},{"path":"/home/runner/work/CodingGeoff.github.io/CodingGeoff.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1731071015000},{"path":"/home/runner/work/CodingGeoff.github.io/CodingGeoff.github.io/node_modules/vue-loader/lib/index.js","mtime":1731071015000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}