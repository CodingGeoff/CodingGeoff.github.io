{"remainingRequest":"/home/runner/work/CodingGeoff.github.io/CodingGeoff.github.io/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/CodingGeoff.github.io/CodingGeoff.github.io/src/components/Desktop/SideBar.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/runner/work/CodingGeoff.github.io/CodingGeoff.github.io/src/components/Desktop/SideBar.vue","mtime":1721659069000},{"path":"/home/runner/work/CodingGeoff.github.io/CodingGeoff.github.io/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CodingGeoff.github.io/CodingGeoff.github.io/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CodingGeoff.github.io/CodingGeoff.github.io/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/runner/work/CodingGeoff.github.io/CodingGeoff.github.io/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CodingGeoff.github.io/CodingGeoff.github.io/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBNZXNzYWdlIGZyb20gJy4vTWVzc2FnZS52dWUnCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnUmlnaHRCYXInLAogIGNvbXBvbmVudHM6IHsKICAgIE1lc3NhZ2UKICB9LAogIGRhdGEoKXsKICAgIHJldHVybiB7CgkJCXNob3dfc2lkZWJhcjogdHJ1ZSwKICAgICAgc2hvd19zaWRlYmFyX2RhZW1vbjogdHJ1ZSwKICAgICAgZGFlbW9uX3RpbWVvdXQ6bnVsbCwKICAgICAgbWF4X2FydGljbGVzOiA1LAogICAgICBhcnRpY2xlczogewogICAgICB9LAogICAgICBhcnRpY2xlc19kaXNwbGF5OnsKICAgICAgfQogICAgfQogIH0sCiAgY3JlYXRlZCgpewogIH0sCiAgbW91bnRlZCgpewogICAgd2luZG93LnNldFRpbWVvdXQoKCk9PnsKICAgICAgdGhpcy5yZWxvYWRfbWVzc2FnZXMoKQogICAgfSwyNDAwKQogIH0sCiAgd2F0Y2g6ewoJCXNpZGViYXJfc3RhdHVzKHZhbCkgewoJCQl0aGlzLnNob3dfc2lkZWJhciA9IHZhbAoJCX0sCiAgICBzaG93X3NpZGViYXIodmFsKSB7CiAgICAgIGlmICh2YWwpIHsKICAgICAgICBpZiAodGhpcy5kYWVtb25fdGltZW91dCAhPSBudWxsKSB7CiAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5kYWVtb25fdGltZW91dCkKICAgICAgICAgIHRoaXMuZGFlbW9uX3RpbWVvdXQgPSBudWxsCiAgICAgICAgfQogICAgICAgIHRoaXMuc2hvd19zaWRlYmFyX2RhZW1vbj0gdHJ1ZQogICAgICB9IGVsc2V7CiAgICAgICAgdGhpcy5kYWVtb25fdGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KCgpPT57CiAgICAgICAgICB0aGlzLnNob3dfc2lkZWJhcl9kYWVtb249IGZhbHNlCiAgICAgICAgfSw4MDApCiAgICAgIH0KICAgIH0sCiAgICBmaWxlbWFwKHZhbCkgewogICAgICBsZXQgYXJ0aWNhbF9mdWxsbGlzdCA9IFtdCiAgICAgIGxldCByZWN1cnNpdmUgPSAoZm9sZGVyLCBmb2xkZXJfbmFtZSkgPT4gewogICAgICAgIGZvciAobGV0IGl0ZW0gb2YgZm9sZGVyKSB7CiAgICAgICAgICBpZiAoaXRlbS5jaGlsZHJlbiA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgIGxldCBuZXdfaXRlbSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoaXRlbSkpCiAgICAgICAgICAgIG5ld19pdGVtLmNvbnRlbnQgPSBmb2xkZXJfbmFtZQogICAgICAgICAgICBhcnRpY2FsX2Z1bGxsaXN0LnB1c2gobmV3X2l0ZW0pCiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZWN1cnNpdmUoaXRlbS5jaGlsZHJlbiwgaXRlbS5uYW1lKQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgICByZWN1cnNpdmUodmFsLCAiRGVza3RvcCIpCiAgICAgIGxldCBzb3J0RnVuYyA9IChhLGIpID0+IHsKICAgICAgICBpZiAoYS5sYXN0ZWRpdHRpbWUgPiBiLmxhc3RlZGl0dGltZSkgewogICAgICAgICAgcmV0dXJuIC0xCiAgICAgICAgfSBlbHNlIGlmIChhLmxhc3RlZGl0dGltZSA9PT0gYi5sYXN0ZWRpdHRpbWUpIHsKICAgICAgICAgIHJldHVybiAwCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJldHVybiAxCiAgICAgICAgfQogICAgICB9CiAgICAgIGFydGljYWxfZnVsbGxpc3Quc29ydChzb3J0RnVuYykKICAgICAgLy8KICAgICAgbGV0IGxvb3BfZW5kID0gTWF0aC5taW4oYXJ0aWNhbF9mdWxsbGlzdC5sZW5ndGgsIHRoaXMubWF4X2FydGljbGVzKQogICAgICBsZXQgbm93X3RpbWUgPSAobmV3IERhdGUoKSkuZ2V0VGltZSgpIC8gMTAwMAogICAgICBmb3IgKGxldCBpPTA7aTxsb29wX2VuZDtpKyspIHsKICAgICAgICBsZXQgYXJ0aWNsZSA9IGFydGljYWxfZnVsbGxpc3RbaV0KICAgICAgICBsZXQgdGltZV9kaWZmID0gbm93X3RpbWUgLSBhcnRpY2xlLmxhc3RlZGl0dGltZQogICAgICAgIGxldCB0aW1lX2RpZmZfc2hvdyA9ICIiCiAgICAgICAgaWYgKHRpbWVfZGlmZiA8IDYwKSB7CiAgICAgICAgICB0aW1lX2RpZmZfc2hvdyA9IE1hdGgucm91bmQoTWF0aC5tYXgodGltZV9kaWZmLDApKSArICIgc2Vjb25kcyBhZ28iCiAgICAgICAgfSBlbHNlIGlmICh0aW1lX2RpZmYgPCAzNjAwKSB7CiAgICAgICAgICB0aW1lX2RpZmZfc2hvdyA9IE1hdGgucm91bmQodGltZV9kaWZmIC8gNjApICsgIiBtaW51dGVzIGFnbyIKICAgICAgICB9IGVsc2UgaWYgKHRpbWVfZGlmZiA8ICgzNjAwICogMjQpKSB7CiAgICAgICAgICB0aW1lX2RpZmZfc2hvdyA9IE1hdGgucm91bmQodGltZV9kaWZmIC8gMzYwMCkgKyAiIGhvdXJzIGFnbyIKICAgICAgICB9IGVsc2UgaWYgKHRpbWVfZGlmZiA8ICgzNjAwICogMjQgKiAzMSkpIHsKICAgICAgICAgIHRpbWVfZGlmZl9zaG93ID0gTWF0aC5yb3VuZCh0aW1lX2RpZmYgLyAoMzYwMCAqIDI0KSkgKyAiIGRheXMgYWdvIgogICAgICAgIH0gZWxzZSBpZiAodGltZV9kaWZmIDwgKDM2MDAgKiAyNCAqIDMxICogMTIpKSB7CiAgICAgICAgICB0aW1lX2RpZmZfc2hvdyA9IE1hdGgucm91bmQodGltZV9kaWZmIC8gKDM2MDAgKiAyNCAqIDMwLjUpKSArICIgbW9udGhzIGFnbyIKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdGltZV9kaWZmX3Nob3cgPSBNYXRoLnJvdW5kKHRpbWVfZGlmZiAvICgzNjAwICogMjQgKiAzNjUpKSArICIgeWVhcnMgYWdvIgogICAgICAgIH0KICAgICAgICB0aGlzLmFydGljbGVzW2ldPSB7CiAgICAgICAgICAgIHRpdGxlOiBhcnRpY2xlLnRpdGxlLAogICAgICAgICAgICBhYnN0cmFjdDogYXJ0aWNsZS5hYnN0cmFjdCwKICAgICAgICAgICAgY29udGVudDogYXJ0aWNsZS5jb250ZW50LAogICAgICAgICAgICB0aW1lOiB0aW1lX2RpZmZfc2hvdywKICAgICAgICAgICAgbGFzdGVkaXR0aW1lOiBhcnRpY2xlLmxhc3RlZGl0dGltZSwKICAgICAgICAgICAgZmlsZW5hbWU6IGFydGljbGUubmFtZSwKICAgICAgICAgICAgZmlsZXNyYzogYXJ0aWNsZS5wYXRoLAogICAgICAgICAgICBmaWxlc2l6ZTogYXJ0aWNsZS5zaXplLAogICAgICAgICAgICBoaWRlOiBmYWxzZSwKICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgfSwKICBjb21wdXRlZDp7CgkJc2lkZWJhcl9zdGF0dXMoKXsKCQkJcmV0dXJuIHRoaXMuJHN0b3JlLnN0YXRlLnNob3dfc2lkZWJhcgoJCX0sCiAgICBub3Rfc2hvd19zaWRlYmFyKCl7CiAgICAgIHJldHVybiAhdGhpcy5zaG93X3NpZGViYXIKICAgIH0sCiAgICBmaWxlbWFwKCl7CiAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5zdGF0ZS5maWxlbWFwCiAgICB9LAogIH0sCiAgbWV0aG9kczp7CiAgICByZWxvYWRfbWVzc2FnZXMocmVzZXR0aW1lPWZhbHNlKXsKICAgICAgbGV0IGlnbm9yZV9zaW5jZSA9IHRoaXMuJGNvb2tpZXMuZ2V0KCJpZ25vcmVfc2luY2UiKQogICAgICBpZiAoaWdub3JlX3NpbmNlID09PSB1bmRlZmluZWQpIHsKICAgICAgICAvLyBpbml0CiAgICAgICAgaWdub3JlX3NpbmNlID0gMAogICAgICAgIHRoaXMuJGNvb2tpZXMuc2V0KCJpZ25vcmVfc2luY2UiLCAiMCIsICIzMGQiKQogICAgICB9IGVsc2UgewogICAgICAgIGlnbm9yZV9zaW5jZSA9IHBhcnNlSW50KGlnbm9yZV9zaW5jZSkKICAgICAgfQogICAgICBpZiAocmVzZXR0aW1lKSB7CiAgICAgICAgdGhpcy4kY29va2llcy5zZXQoImlnbm9yZV9zaW5jZSIsICIwIiwgIjMwZCIpCiAgICAgICAgaWdub3JlX3NpbmNlID0gMAogICAgICB9CiAgICAgIGxldCBjb3VudCA9IDA7CiAgICAgIGxldCB0YXJnZXQgPSBuZXcgT2JqZWN0KCkKICAgICAgZm9yIChsZXQga2V5IGluIHRoaXMuYXJ0aWNsZXMpIHsKICAgICAgICBsZXQgaXRlbSA9IHRoaXMuYXJ0aWNsZXNba2V5XQogICAgICAgIGlmIChpdGVtLmxhc3RlZGl0dGltZSA8PSBpZ25vcmVfc2luY2UpIHsKICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgfQogICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHsKICAgICAgICAgIHRhcmdldFtrZXldID0gaXRlbSAKICAgICAgICAgIGxldCBuZXdfdGFyID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0YXJnZXQpKQogICAgICAgICAgdGhpcy5hcnRpY2xlc19kaXNwbGF5ID0gbmV3X3RhcgogICAgICAgICAgdGhpcy5yZWZyZXNoX2NvdW50KCkKICAgICAgICB9LChjb3VudCsxKSo0MDApCiAgICAgICAgY291bnQgKz0gMTsKICAgICAgfWNvdW50OwogICAgICAKICAgIH0sCiAgICBjbGVhbl9tZXNzYWdlcygpewogICAgICBpZiAodGhpcy5hcnRpY2xlc19kaXNwbGF5Lmxlbmd0aCA+IDApIHsKICAgICAgICB0aGlzLiRjb29raWVzLnNldCgiaWdub3JlX3NpbmNlIiwgdGhpcy5hcnRpY2xlc19kaXNwbGF5WzBdLmxhc3RlZGl0dGltZSwgIjMwZCIpCiAgICAgIH0KICAgICAgdGhpcy4kc3RvcmUuY29tbWl0KCdjbGVhbl9hbGxfbWVzc2FnZXMnKQogICAgICBmb3IgKGxldCBrZXkgb2YgT2JqZWN0LmtleXModGhpcy5hcnRpY2xlc19kaXNwbGF5KSkgewogICAgICAgIHRoaXMuYXJ0aWNsZXNfZGlzcGxheVtrZXldLmhpZGUgPSB0cnVlCiAgICAgIH0KICAgICAgdGhpcy5yZWZyZXNoX2NvdW50KCkKICAgIH0sCiAgICBjbG9zZV90cmlnZ2VyZWQodmFsKXsKICAgICAgdGhpcy4kY29va2llcy5zZXQoImlnbm9yZV9zaW5jZSIsIHZhbC50b1N0cmluZygpLCAiMzBkIikKICAgIH0sCiAgICBkZWxldGVfaXRlbShmaWxlc3JjKXsKICAgICAgZm9yIChsZXQga2V5IG9mIE9iamVjdC5rZXlzKHRoaXMuYXJ0aWNsZXNfZGlzcGxheSkpIHsKICAgICAgICBsZXQgaXRlbSA9IHRoaXMuYXJ0aWNsZXNfZGlzcGxheVtrZXldCiAgICAgICAgaWYgKGl0ZW0uZmlsZXNyYyA9PT0gZmlsZXNyYykgewogICAgICAgICAgaXRlbS5oaWRlID0gdHJ1ZQogICAgICAgIH0KICAgICAgfQogICAgICB0aGlzLnJlZnJlc2hfY291bnQoKQogICAgfSwKICAgIHJlZnJlc2hfY291bnQoKXsKICAgICAgbGV0IGNvdW50ID0gMAogICAgICBmb3IgKGxldCBrZXkgb2YgT2JqZWN0LmtleXModGhpcy5hcnRpY2xlc19kaXNwbGF5KSkgewogICAgICAgIGxldCBpdGVtID0gdGhpcy5hcnRpY2xlc19kaXNwbGF5W2tleV0KICAgICAgICBpZiAoaXRlbS5oaWRlID09PSBmYWxzZSkgewogICAgICAgICAgY291bnQgKz0gMQogICAgICAgIH0KICAgICAgfQogICAgICB0aGlzLiRzdG9yZS5jb21taXQoImRpc3BsYXlfYXJ0aWNsZV9udW1fY2hhbmdlZCIsIGNvdW50KQogICAgfQogIH0KfQo="},null]}