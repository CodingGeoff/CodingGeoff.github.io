{"remainingRequest":"/home/runner/work/CodingGeoff.github.io/CodingGeoff.github.io/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/CodingGeoff.github.io/CodingGeoff.github.io/src/components/LoginPage/LoginPage.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/runner/work/CodingGeoff.github.io/CodingGeoff.github.io/src/components/LoginPage/LoginPage.vue","mtime":1721659069000},{"path":"/home/runner/work/CodingGeoff.github.io/CodingGeoff.github.io/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CodingGeoff.github.io/CodingGeoff.github.io/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CodingGeoff.github.io/CodingGeoff.github.io/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/runner/work/CodingGeoff.github.io/CodingGeoff.github.io/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CodingGeoff.github.io/CodingGeoff.github.io/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBLZXlCb2FyZCBmcm9tICcuLi9LZXlib2FyZC9LZXlCb2FyZC52dWUnOwppbXBvcnQgUmVzdGFydEJ1dHRvbiBmcm9tICcuL1Jlc3RhcnRCdXR0b24udnVlJzsKCmNvbnN0IHdlZWtkYXlzID0gbmV3IEFycmF5KCdNb25kYXknLCAnVHVlc2RheScsICdXZWRuZXNkYXknLCAnVGh1cnNkYXknLCAnRnJpZGF5JywgJ1NhdHVyZGF5JywgJ1N1bmRheScpOwoKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICdMb2dpblBhZ2UnLAogIGNvbXBvbmVudHM6IHsKICAgIEtleUJvYXJkLAogICAgUmVzdGFydEJ1dHRvbgogIH0sCiAgZGF0YSgpewogICAgcmV0dXJuIHsKICAgICAgbG9naW5fbG9ja2VkOmZhbHNlLAogICAgICBzaG93X2tleWJvYXJkOmZhbHNlLAogICAgICBzaG93X21pZGRsZTp0cnVlLAogICAgICBkYXRlX2hvdXI6MCwKICAgICAgZGF0ZV9taW51dGU6MCwKICAgICAgZGF0ZV95ZWFyOjE5NzAsCiAgICAgIGRhdGVfbW9udGg6MSwKICAgICAgZGF0ZV9kYXRlOjEsCiAgICAgIGRhdGVfd2Vla2RheTowLAogICAgICAvLyB1c2VyX25hbWU6Ik9ic2VydmVyIiwKICAgICAgdXNlcl9uYW1lOiJHdWVzdCIsCiAgICAgIHBhc3N3b3JkOiIxMjM0NTY3OCIsCiAgICAgIHBhc3N3b3JkX2Fuc3dlcjoiMTIzNDU2NzgiLAogICAgICByZWxheTpmYWxzZSwKICAgICAgc2hvd19sb2FkaW5nX2JhcjpmYWxzZSwKICAgICAgYnV0dG9uX3NoYWtpbmc6ZmFsc2UsCiAgICAgIHRpbWVyOm51bGwsCiAgICAgIHRpbWVyMjpudWxsLAogICAgfQogIH0sCiAgY3JlYXRlZCgpewogICAgdGhpcy5yZWZyZXNoX3RpbWUoKQogICAgd2luZG93LnNldEludGVydmFsKCgpID0+IHsKICAgICAgdGhpcy5yZWZyZXNoX3RpbWUoKQogICAgfSwgMTAwMCk7CiAgfSwKICBtb3VudGVkKCl7CiAgICBsZXQgYmFyID0gdGhpcy4kcmVmcy5wYXNzd29yZF9pbnB1dF9iYXIKICAgIGJhcgoKICAgIHRoaXMudGltZXIgPSB3aW5kb3cuc2V0SW50ZXJ2YWwoKCk9PnsKICAgICAgdGhpcy5yZWxheSA9IGZhbHNlCiAgICAgIHRoaXMuJHJlZnMuaW5maW5pdGVfYmFyLnN0eWxlLndpZHRoPScwcHgnCiAgICAgIHRoaXMudGltZXIyID0gd2luZG93LnNldFRpbWVvdXQoKCk9PnsKICAgICAgICB0aGlzLnJlbGF5ID0gdHJ1ZQogICAgICAgIHRoaXMuJHJlZnMuaW5maW5pdGVfYmFyLnN0eWxlLndpZHRoPScyNjRweCcKICAgICAgfSwyMDApCiAgICB9LDgwMCkKICB9LAogIHdhdGNoOnsKICB9LAogIGNvbXB1dGVkOnsKICAgIGRhdGVfd2Vla2RheV9kaXNwbGF5KCl7CiAgICAgIHJldHVybiB3ZWVrZGF5c1t0aGlzLmRhdGVfd2Vla2RheV0KICAgIH0KICB9LAogIG1ldGhvZHM6ewogICAgUHJlZml4WmVybyhudW0sIG4pIHsKICAgICAgcmV0dXJuIChBcnJheShuKS5qb2luKDApICsgbnVtKS5zbGljZSgtbik7CiAgICB9LAogICAgbG9naW5fY2xpY2tlZCgpewogICAgICAvLyBwdyBjaGVjawogICAgICBpZiAodGhpcy5wYXNzd29yZCA9PT0gdGhpcy5wYXNzd29yZF9hbnN3ZXIpIHsKICAgICAgICAvLyBjb3JyZWN0IHBhc3N3b3JkCiAgICAgICAgdGhpcy5sb2dpbl9sb2NrZWQgPSBmYWxzZTsKICAgICAgICB0aGlzLnNob3dfbG9hZGluZ19iYXIgPSB0cnVlCiAgICAgICAgd2luZG93LnNldFRpbWVvdXQoKCk9PnsKICAgICAgICAgIHRoaXMuc2hvd19sb2FkaW5nX2JhciA9IGZhbHNlCiAgICAgICAgICBjbGVhckludGVydmFsKHRoaXMudGltZXIpCiAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lcjIpCiAgICAgICAgICB0aGlzLiRyb3V0ZXIucHVzaCh7CiAgICAgICAgICAgIG5hbWU6ICdEZXNrdG9wJywKICAgICAgICAgIH0pCiAgICAgICAgICAvLyBmdWxsIHNjcmVlZW4KICAgICAgICAgIGxldCBlbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2FwcCcpCiAgICAgICAgICBlbGVtLnJlcXVlc3RGdWxsc2NyZWVuKCk7CiAgICAgICAgfSwxODAwKQogICAgICAgIHJldHVybgogICAgICB9IGVsc2UgaWYgKHRoaXMucGFzc3dvcmQgPT09ICIiKSB7CiAgICAgICAgdGhpcy5sb2dpbl9sb2NrZWQgPSB0cnVlOwogICAgICAgIGZvciAobGV0IGk9MDtpPHRoaXMucGFzc3dvcmRfYW5zd2VyLmxlbmd0aDtpKyspIHsKICAgICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHsKICAgICAgICAgICAgdGhpcy5wYXNzd29yZCArPSB0aGlzLnBhc3N3b3JkX2Fuc3dlcltpXQogICAgICAgICAgICBpZiAoaSA9PT0gKHRoaXMucGFzc3dvcmRfYW5zd2VyLmxlbmd0aCAtIDEpKSB7CiAgICAgICAgICAgICAgdGhpcy5sb2dpbl9jbGlja2VkKCkKICAgICAgICAgICAgfQogICAgICAgICAgfSwgMTAwICogaSkKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgLy8gd3JvbmcgcGFzc3dvcmQKICAgICAgICB0aGlzLnNob3dfbG9hZGluZ19iYXIgPSB0cnVlCiAgICAgICAgd2luZG93LnNldFRpbWVvdXQoKCk9PnsKICAgICAgICAgIHRoaXMuc2hvd19sb2FkaW5nX2JhciA9IGZhbHNlCiAgICAgICAgICB0aGlzLmJ1dHRvbl9zaGFraW5nID0gdHJ1ZQogICAgICAgIH0sMzAwMCkKICAgICAgICB3aW5kb3cuc2V0VGltZW91dCgoKT0+ewogICAgICAgICAgdGhpcy5idXR0b25fc2hha2luZyA9IGZhbHNlCiAgICAgICAgfSwzODAwKQogICAgICB9CiAgICB9LAogICAgdmtleV9wcmVzc2VkKGtleSwgdXBwZXJzY2FsZSl7CiAgICAgIGlmICh0aGlzLmxvZ2luX2xvY2tlZCkgewogICAgICAgIHJldHVybgogICAgICB9CiAgICAgIC8vIGZ1bmN0aW9uYWwga2V5cyBvbmx5IGVudGVyLWxlZnQtcmlnaHQtZGVsZXRlIGhhcyBmdW5jdGlvbgogICAgICB0aGlzLiRyZWZzLnBhc3N3b3JkX2lucHV0X2Jhci5mb2N1cygpCiAgICAgIGlmIChrZXkgPT09ICdRVCcpIHsKICAgICAgICBrZXkgPSAiJyIKICAgICAgfSBlbHNlIGlmIChrZXkgPT09ICdESCcpIHsKICAgICAgICBrZXkgPSAnLCcKICAgICAgfSBlbHNlIGlmIChrZXkgPT09ICdKSCcpIHsKICAgICAgICBrZXkgPSAnLicKICAgICAgfSBlbHNlIGlmIChrZXkgPT09ICdTUEFDRScpIHsKICAgICAgICBrZXkgPSAnICcKICAgICAgfSBlbHNlIGlmIChrZXkgPT09ICdCQUsnKSB7CiAgICAgICAgbGV0IGN1ciA9IHRoaXMuJHJlZnMucGFzc3dvcmRfaW5wdXRfYmFyLnNlbGVjdGlvblN0YXJ0CiAgICAgICAgdGhpcy5wYXNzd29yZCA9IHRoaXMucGFzc3dvcmQuc3Vic3RyKDAsTWF0aC5tYXgoMCxjdXItMSkpICsgdGhpcy5wYXNzd29yZC5zdWJzdHIoY3VyLHRoaXMucGFzc3dvcmQubGVuZ3RoIC0gY3VyKQogICAgICAgIHJldHVybgogICAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ0xFRlQnKSB7CiAgICAgICAgbGV0IGN1ciA9IHRoaXMuJHJlZnMucGFzc3dvcmRfaW5wdXRfYmFyLnNlbGVjdGlvblN0YXJ0CiAgICAgICAgdGhpcy4kcmVmcy5wYXNzd29yZF9pbnB1dF9iYXIuc2VsZWN0aW9uU3RhcnQgPSB0aGlzLiRyZWZzLnBhc3N3b3JkX2lucHV0X2Jhci5zZWxlY3Rpb25FbmQgPSBNYXRoLm1heChjdXIgLSAxLDApCiAgICAgICAgcmV0dXJuCiAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSAnUklHSFQnKSB7CiAgICAgICAgbGV0IGN1ciA9IHRoaXMuJHJlZnMucGFzc3dvcmRfaW5wdXRfYmFyLnNlbGVjdGlvblN0YXJ0CiAgICAgICAgdGhpcy4kcmVmcy5wYXNzd29yZF9pbnB1dF9iYXIuc2VsZWN0aW9uU3RhcnQgPSB0aGlzLiRyZWZzLnBhc3N3b3JkX2lucHV0X2Jhci5zZWxlY3Rpb25FbmQgPSBNYXRoLm1pbihjdXIgKyAxLHRoaXMucGFzc3dvcmQubGVuZ3RoKQogICAgICAgIHJldHVybgogICAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ0VOVEVSJykgewogICAgICAgIHRoaXMubG9naW5fY2xpY2tlZCgpCiAgICAgICAgcmV0dXJuCiAgICAgIH0KICAgICAgbGV0IGtleWtleSA9IGtleS5sZW5ndGggPT0xP2tleTp1cHBlcnNjYWxlP2tleS50b1VwcGVyQ2FzZSgpOmtleS50b0xvd2VyQ2FzZSgpOwogICAgICBpZiAoKCF0aGlzLmxvZ2luX2xvY2tlZCkgJiYga2V5a2V5Lmxlbmd0aCA9PT0gMSkgewogICAgICAgIGxldCBjdXIgPSB0aGlzLiRyZWZzLnBhc3N3b3JkX2lucHV0X2Jhci5zZWxlY3Rpb25TdGFydAogICAgICAgIHRoaXMucGFzc3dvcmQgPSB0aGlzLnBhc3N3b3JkLnN1YnN0cigwLGN1cikgKyBrZXlrZXkgKyB0aGlzLnBhc3N3b3JkLnN1YnN0cihjdXIsdGhpcy5wYXNzd29yZC5sZW5ndGggLSBjdXIpCiAgICAgIH0gICAKICAgIH0sCiAgICBzaG93X2tleWJvYXJkX2NsaWNrZWQoKXsKICAgICAgdGhpcy5zaG93X2tleWJvYXJkID0gIXRoaXMuc2hvd19rZXlib2FyZAogICAgfSwKICAgIHNob3dfbWlkZGxlX2NsaWNrZWQoKXsKICAgICAgdGhpcy5zaG93X21pZGRsZSA9ICF0aGlzLnNob3dfbWlkZGxlCiAgICAgIGlmICh0aGlzLnNob3dfbWlkZGxlKSB7CiAgICAgICAgdGhpcy5sb2dpbl9sb2NrZWQgPSBmYWxzZQogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMubG9naW5fbG9ja2VkID0gdHJ1ZQogICAgICB9CiAgICB9LAogICAgYmxhbmtlcigpewogICAgICBpZiAodGhpcy5zaG93X21pZGRsZSkgewogICAgICAgIHJldHVybgogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuc2hvd19taWRkbGVfY2xpY2tlZCgpCiAgICAgIH0gCiAgICB9LAogICAgcmVmcmVzaF90aW1lKCkgewogICAgICBsZXQgZGF0ZSA9IG5ldyBEYXRlKCk7CiAgICAgIHRoaXMuZGF0ZV95ZWFyID0gZGF0ZS5nZXRGdWxsWWVhcigpOwogICAgICB0aGlzLmRhdGVfbW9udGggPSBkYXRlLmdldE1vbnRoKCkgKyAxOwogICAgICB0aGlzLmRhdGVfZGF0ZSA9IGRhdGUuZ2V0RGF0ZSgpOwogICAgICB0aGlzLmRhdGVfd2Vla2RheSA9IGRhdGUuZ2V0RGF5KCkgLSAxOwogICAgICB0aGlzLmRhdGVfaG91ciA9IGRhdGUuZ2V0SG91cnMoKTsKICAgICAgdGhpcy5kYXRlX21pbnV0ZSA9IGRhdGUuZ2V0TWludXRlcygpOwogICAgfSwKICAgIGJnbG9hZGVkKCl7CiAgICAgIGxldCBjdGltZSA9IChuZXcgRGF0ZSgpKS5nZXRUaW1lKCkKICAgICAgbGV0IHRpbWVfZGlmZiA9IE1hdGgubWF4KGN0aW1lIC0gdGhpcy4kc3RvcmUuc3RhdGUuc3RhcnRfbG9hZF90aW1lLDApCiAgICAgIGlmICggaXNOYU4odGltZV9kaWZmKSB8fCB0aW1lX2RpZmYgPT09IHVuZGVmaW5lZCB8fCB0aW1lX2RpZmYgPT09IG51bGwpIHsKICAgICAgICB0aW1lX2RpZmYgPSAwCiAgICAgIH0KICAgICAgbGV0IHdhaXRfdGltZSA9IE1hdGgubWF4KDE4MDAgLSB0aW1lX2RpZmYsMCkKICAgICAgd2luZG93LnNldFRpbWVvdXQoKCk9PnsKICAgICAgICB0aGlzLiRzdG9yZS5jb21taXQoJ2hpZGVfaW50ZXJsdWRlJykKICAgICAgfSwgd2FpdF90aW1lKQogICAgfSwKICAgIHJlc3RhcnRfY2xpY2tlZCgpewogICAgICBsb2NhdGlvbi5yZWxvYWQoKTsKICAgIH0sCiAgICBoYWx0X2NsaWNrZWQoKXsKICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS5jdXJzb3I9J3Byb2dyZXNzJwogICAgICB3aW5kb3cuc2V0VGltZW91dCgoKT0+ewogICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUuY3Vyc29yPSdkZWZhdWx0JwogICAgICAgIHRoaXMuJHJvdXRlci5wdXNoKHsKICAgICAgICAgIG5hbWU6ICdEb3duJywKICAgICAgICB9KQogICAgICB9LDgwMCkKICAgIH0KICB9Cn0K"},null]}